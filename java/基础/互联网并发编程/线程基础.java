1. 线程安全
对象锁

概念：当多个线程访问某一个类（对象或方法）时，这个类始终都能表现出正确的行为，那么这个类（对象或方法）就是线程安全的。

synchronized:可以在任意对象及方法上加锁，而加锁的这段代码称为“互斥区”或“临界区”。
多个线程，一把锁
/*
 * 当多个线程访问myThread的run方法时，以排队的方式进行处理(这里的排队是按照CPU分配的先后顺序而定的)，
一个线程要执行synchronized修饰的方法里的代码
1.尝试获得锁
2.如果拿到锁，执行synchronized代码体内容;拿不到锁，这个线程就会不断地尝试获得这把锁，直到拿到为止，
而且是多个线程同时去竞争这把锁(也就是会有锁竞争的问题)
*/
多个线程，多把锁
/**
 * 关键字synchronized取得的锁都是对象锁，而不是把一段代码（方法）当做锁，
 * 所以代码中哪个线程先执行synchronized关键字的方法，哪个线程就持有该方法所属对象的锁（Lock），两个对象，线程获得的就是两个不同的锁，他们互不影响。
 * 
 * 在静态方法上加synchronized关键字，表示锁定.class类，类一级别的锁（独占.class类）。
 */

2.  对象锁的同步和异步
同步:
    同步的概念就是共享（共用），如果不是共享的资源，就没有必要进行同步。
目的是为了线程安全。

异步:
    异步的概念就是独立，相互之间不受到任何制约。