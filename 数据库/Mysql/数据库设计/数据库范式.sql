数据库设计中，遵守设计范式可以有效提高数据库设计。
可以避免写入异常，更新异常，删除异常，数据冗余等问题。

1.第一范式
2.第二范式
3.第三范式

----------------------------------
1.第一范式
定义：数据库表中的所有字段都是单一属性，不可再分，也就是一对一。一个key对应一个value
	  也可以说数据库中的表都是二维表。

----------------------------------
2.第二范式
定义：数据库的表中不存在非关键字段对任一候选关键字段的部分函数依赖。
    部分函数依赖是指存在着组合关键字中的某一关键字决定非关键字的情况。
    也就是说，所有单关键字段的表都符合第二范式。

理解:数据库中的每行数据，最好可以只有一个主键可以唯一标识。
     如果涉及到关联主键，需要两个或以上的主键联合，才能唯一标识数据的情况下，
     就不要再出现，联合主键中的某关键字可以唯一标识行中的某些数据了。 

     可以将同一类的数据，设计在一张表中。明确数据
     如，可以将商品的属性提取之后，存在一张商品中
         将供应商的属性提取之后，存在一张供应商信息表中

举例如下：
不好的例子：
表：
商品名称   供应商名称  价格  重量  供应商电话  有效期  分类

可乐       饮料一厂    30    100   18819446403 2017    饮料
可乐       饮料二厂    30    100   13539255380 2016    饮料

该表设计不符合第二范式要求
此表的唯一标识是联合主键（商品名称+供应商名称）
存在着下列依赖关系，不符合要求
商品名称->决定着（价格，重量，商品有效期等）
供应商名称->决定着（供应商电话）

正确的设计：
可以将上面的表拆分为三张表
1.商品表 2.供应商信息表 3.供应商、商品关系表

分门别类：
-------------------
商品表：
商品Id  商品名称  价格  重量  有效期  分类
1		可乐	  30    100   2017    饮料
-------------------
供应商信息表：
供应商Id  供应商名称  供应商电话
1         饮料一厂    18819446403
-------------------
供应商、商品关系表
供应商Id  商品Id  扩展字段....
1         1

-----------------------------------
3.第三范式
  如果数据表中不存在非关键字段对任意候选关键字段的传递函数依赖，则符合第三范式。

举例如下：
错误例子
商品表：
商品Id  商品名称  价格  重量  有效期  分类  分类描述
1		可乐	  30    100   2017    饮料  碳酸饮料

传递依赖关系如下：
商品名称->分类->分类描述
也就是说，存在非关键字段”分类描述“，对关键字段”商品名称“
的传递函数依赖。

正确例子
商品表：
商品Id  商品名称  价格  重量  有效期
1 		可乐	  30    100   2017
分类信息表：
分类Id  分类      分类描述
1		酒水饮料  碳酸饮料
中间表：
分类Id  商品Id
1		1
