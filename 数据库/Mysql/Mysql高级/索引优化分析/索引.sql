1.索引是什么：
2.索引优势与劣势：
3.索引分类与建立索引的语句：
4.索引结构及检索原理：
5.索引适用场景:

其他扩展知识：




------------------------
1.索引是什么：（排好序的快速查找数据结构）B+Tree索引
	帮助MySQL高效获取数据的 数据结构。
	目的在于提高查询效率，可以类比字典。
  
   在数据之外，数据库系统还维护着满足特定查找算法的数据结构，
这些数据结构以某种方式引用指向数据，实现高级查找算法。
可能的索引方式:（B+Tree索引）
  通过二叉树折半查找。

-------------------------
2.索引优势与劣势：
  优势：
  2.1.类似大学图书馆建书目索引，提高数据检索的效率，降低数据库的IO成本。
  2.2.通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗。
  劣势：
  实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占空间的。
  2.3.虽然索引会提高查询速度，但是同时也会降低更新表的速度，如对表进行
  insert update delete 等操作，MySQL不仅要保存数据，还要保存索引文件。

--------------------------
3.索引分类与建立索引的语句：
  分类：
  3.1.单值索引
  	一个索引只包含单个列，一个表可以有多个单列索引（建议，一张表最多不要超过5个）
  3.2.唯一索引
  	索引列的值必须唯一，但允许有空值。如银行卡号，身份证号
  3.3.复合索引
  	一个索引包含多个列。
  3.4.基本语法
    drop index idx_userId on user;
    alter table user add index idx_userId(userId); 

----------------------------
4.索引结构及检索原理：
  索引结构:
  4.1.BTree索引
  4.2.Hash索引
  4.3.full-text全文索引
  4.4.R-Tree索引
  检索原理：
  详见  检索原理.png
  真实情况：3层的B+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，
如果没有索引，每个数据项都要发生一次IO,那么总共需要百万次的IO，显然成本非常高。



----------------------------
5.索引适用场景:

  5.1:哪些情况适合建立索引
    1：主键自动建立唯一索引
    2：频繁作为查询条件的字段应该建立索引
    3：查询中与其它表关联的字段，外键关系建立索引
    4：频繁更新的字段不适合创建索引（因为每次更新不只需要更新数据，还需要更新索引）
    5：where 条件里用不到的字段不创建索引
    6：单键/组合索引的选择问题（在高并发下倾向创建组合索引）
    7：查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度
    8：查询中统计或者分组字段（group by）
  
  5.2:哪些情况不适合建立索引
    1:表记录太少
    2:经常增删改的表
    3:数据重复且分布平均的表字段，因此应该只为最经常查询和排序的数据列建立索引
    （注意，如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果）
    例如：在性别上建立索引（没有必要）





----------------------------
其他扩展知识：
1.记录删除时，不进行真正的删除，一般只将记录置为无效，
原因：
  1.1.为了大数据分析
  1.2.保护索引不被破坏。（索引在进行频繁的增删改之后，会失效）
  解决方法是，运维工程师每隔一段时间，将索引重新建立。

2.有了索引，为什么查询快，更新插入却慢
  2.1.因为有了索引之后，更新与插入操作在更改数据的同时，也需要更改索引。
  结论：需要频繁删改的字段不适合建立索引。

3.索引只是提高效率的一个因素，如果你的MySQL有大数据的表，就需要花时间研究建立最优秀的索引。
例如，可以通过数据分析，知道用户最经常查询的条件是哪个字段，然后在此字段建立索引。 

4.大部分情况下，复合索引优于单值索引。 