1.延长作用域链:
2.没有块级作用域:











-------------------------------------------------------------------------------------------------------------------------------
1.延长作用域链:

	当执行流进入下列任何一个语句时，作用域链就会得到加长：

try-catch 语句的 catch 块；
with 语句。
    这两个语句都会在作用域链的前端添加一个变量对象。对 with 语句来说，会将指定的对象添加到
作用域链中。对 catch 语句来说，会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明

function buildUrl() { 
 var qs = "?debug=true"; 
 with(location){ 
 var url = href + qs; 
 } 
 return url; 
} 

	with 语句接收的是 location 对象，因此其变量对象中就包含了 location 对象的所有属
性和方法，而这个变量对象被添加到了作用域链的前端。
	buildUrl()函数中定义了一个变量 qs。当在with 语句中引用变量 href 时（实际引用的是 location.href），可以在当前执行环境的变量对象中
找到。当引用变量 qs 时，引用的则是在 buildUrl()中定义的那个变量，而该变量位于函数环境的变
量对象中。
	至于 with 语句内部，则定义了一个名为 url 的变量，因而 url 就成了函数执行环境的一
部分，所以可以作为函数的值被返回。


-----------------------------------------------------------------
2.没有块级作用域:

if (true) { 
 var color = "blue"; 
} 
alert(color); //"blue" 

	这里是在一个 if 语句中定义了变量 color。如果是在 C、C++或 Java 中，color 会在 if 语句执
行完毕后被销毁。但在 JavaScript 中，if 语句中的变量声明会将变量添加到当前的执行环境（在这里是
全局环境）中。	

-----------------------------------

for (var i=0; i < 10; i++){ 
 doSomething(i); 
} 
alert(i); //10 

	对于有块级作用域的语言来说，for 语句初始化变量的表达式所定义的变量，只会存在于循环的环
境之中。而对于 JavaScript 来说，由 for 语句创建的变量 i 即使在 for 循环执行结束后，也依旧会存在
于循环外部的执行环境中。