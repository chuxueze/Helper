1.简介
2.为什么要有这个特性
3.代码实例





--------------------------------------------------------------------
1.简介
Java 8 新增了接口的默认方法。

简单说，默认方法就是接口可以有实现方法，而且不需要实现类去实现其方法。
我们只需在方法名前面加个 default 关键字即可实现默认方法。


---------------------------------
2.为什么要有这个特性
    首先，之前的接口是个双刃剑，好处是面向抽象而不是面向具体编程，缺陷是，当需要修改接口时候，需要修改全部实现该接口的类，目前的
java8 之前的集合框架没有 foreach 方法，通常能想到的解决办法是在JDK里给相关的接口添加新的方法及实现。然而，对于已经发布的版本，
是没法在给接口添加新方法的同时不影响已有的实现。所以引进的默认方法。他们的目的是为了解决接口的修改与现有的实现不兼容的问题。

旧接口的特点
优点：面向抽象，不面向具体编程
缺陷：当需要修改接口时，需要修改所有的实现类。

场景：如果存在1个接口，随着业务的发展，已经被2W个实现类使用。后来发现，需要新增1个新的方法，而该方法的实现方式在2W个实现类里都是
     1 样的，此时就可以用到此特性。在接口里定义好方法名并实现具体内容。


新接口的特点：
  保留原有的性质，增加接口默认实现。
  避免实现接口的实现类重复实现同样的代码，如果是同样的代码，则在接口类中定义并实现就好。
---------------------------------
3.代码实例
可以使用 default 和 static

3.1 实现多个接口，有多个默认方法的情况下
interface Vehicle {
    void simple();
    default void print() {
        System.out.println("默认方法定义：我是一辆车!");
    }
    static void print2(){
        System.out.println("静态方法定义： 我是一车");
    }
}

class VFImpl implements Vehicle {
    @Override
    public void simple() {
        System.out.println("普通实现");
    }
}

public class Car {
    public static void main(String[] args) {
        VFImpl vfImpl = new VFImpl();
        //调用普通接口，需要在实现类里实现具体方法
        vfImpl.simple();
        //调用默认接口，不需要在实现类里实现具体方法，只取接口默认实现
        //默认方法用对象调用
        vfImpl.print();
        //静态方法用接口类直接调用
        Vehicle.print2();
    }
}


以上输出:

普通实现
默认方法定义：我是一辆车!
静态方法定义： 我是一车