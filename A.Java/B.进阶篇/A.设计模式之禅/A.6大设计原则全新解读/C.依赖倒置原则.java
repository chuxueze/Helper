1.简介:
2.在项目中使用此规则:








--------------------------------------------------------------------------------------------------------------------------------
1.简介:

	● 高层模块不应该依赖低层模块，两者都应该依赖其抽象；
	● 抽象不应该依赖细节；
	● 细节应该依赖抽象


	在 Java 语言中，抽象就是指接口或抽象类，两者都是不能直接被实例化的；细节就是实
现类，实现接口或继承抽象类而产生的类就是细节，其特点就是可以直接被实例化，也就是
可以加上1个关键字 new 产生1个对象。


依赖倒置原则在 Java 语言中的表现就是：
	● 模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过
接口或抽象类产生的；
	● 接口或抽象类不依赖于实现类；
	● 实现类依赖接口或抽象类

	更加精简的定义就是“面向接口编程”——OOD（Object-Oriented Design)



---------------------------------------------------------------------
2.在项目中使用此规则:

2.1:每个类尽量都有接口或抽象类，或者抽象类和接口两者都具备
    这是依赖倒置的基本要求，接口和抽象类都是属于抽象的，有了抽象才可能依赖倒置。

2.2:变量的表面类型尽量是接口或者是抽象类
    很多书上说变量的类型1定要是接口或者是抽象类，这个有点绝对化了，比如1个工具
类，xxxUtils 一般是不需要接口或是抽象类的。还有，如果你要使用类的 clone 方法，就必须
使用实现类，这个是JDK提供的1个规范。

2.3:任何类都不应该从具体类派生
    如果1个项目处于开发状态，确实不应该有从具体类派生出子类的情况，但这也不是绝
对的，因为人都是会犯错误的，有时设计缺陷是在所难免的，因此只要不超过两层的继承都
是可以忍受的。特别是负责项目维护的同志，基本上可以不考虑这个规则，为什么？维护工
作基本上都是进行扩展开发，修复行为，通过1个继承关系，覆写1个方法就可以修正1个
很大的 Bug，何必去继承最高的基类呢？（当然这种情况尽量发生在不甚了解父类或者无法
获得父类代码的情况下。）

2.4:尽量不要覆写基类的方法
    如果基类是1个抽象类，而且这个方法已经实现了，子类尽量不要覆写。类间依赖的是
抽象，覆写了抽象方法，对依赖的稳定性会产生1定的影响。

2.5:结合里氏替换原则
    接口负责定义 public 属性和方法，并且声明与其他
对象的依赖关系，抽象类负责公共构造部分的实现，实现类准确的实现业务逻辑，同时在适
当的时候对父类进行细化.