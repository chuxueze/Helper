1.接口概念:
2.隔离概念:
3.规范约束:









-----------------------------------------------------------------------------------------------------------------------------------
1.接口概念:
    实例接口（Object Interface），在 Java中 声明1个类，然后用 new 关键字产生1个实例，
它是对1个类型的事物的描述，这是1种接口。比如你定义 Person 这个类，然后使用
Person zhangSan=new Person()
产生了1个实例，这个实例要遵从的标准就是 Person 这个类，Person 类就是 zhangSan 的接口。

实例接口:
也就是说，Java 中的类也是1种接口。

类接口:
Java 中经常使用的 interface 关键字定义的接口。




-----------------------------------------------------------
2.隔离概念:

2.1:
Clients should not be forced to depend upon interfaces that they do not use
（客户端不应该依赖它不需要的接口。）

   客户端需要什么接口就提供什么接口，把不需要的接口剔除掉，那就需要对接口进行细化，
保证其纯洁性。



2.2:
The dependency of one class to another one should depend on the smallest possible interface.
（类间的依赖关系应该建立在最小的接口上。）

　　要求“尽量使用多个专门的接口”
　　就是指提供给每个模块的都应该是单１接口，提供给几个模块就应该有几个接口，而不是建立１个庞大的臃肿的接口，
容纳所有的客户端访问。



-----------------------------------------------------------
3.规范约束:

  接口隔离原则是对接口进行规范约束，其包含以下4层含义
  
  3.1:接口要尽量小
  小也要有限度，那么限度的依据就是:
根据接口隔离原则拆分接口时，首先必须满足单1职责原则。

  3.2:接口要高内聚
  高内聚就是提高接口、类、模块的处理能力，减少对外的交互。
具体到接口隔离原则就是，要求在接口中尽量少公布 public 方法，接口是对外的承诺，承诺越少对系统的开发越有利，变更的风险也就越少，同时也有利于降低成本。

  3.3:定制服务
  定制服务就是单独为1个个体提供优良的服务。只提供访问者需要的方法。
  例如: 做1个图书馆管理系统，有1个图书查询接口，
其中有 listByName(String name) 接口是要提供给外网使用，listByCondition(Map<String,Object> map) 是只提供内部系统管理人员使用的。
那就有必要把这两个接口放在不同类接口里，外网系统需要 listByName(String name) 就实现 listByName 接口。内部系统 listByCondition(Map<String,Object> map) 
就实现 listByCondition 接口。
  不要放在同1个类里，不然可能会导致，外网系统误操作，引用了 listByCondition 方法，导致高并发查询，导致系统不稳定。

  3.4:接口设计是有限的
  接口的设计粒度越小，系统越灵活，这是不争的事实。但是，灵活的同时也带来了结构的复杂化，开发难度增加，可维护性降低，这不是1个项目或产品所期望看到的，所以接口
设计1定要注意适度，这个“度”如何来判断呢？根据经验和常识判断，没有1个固化或可测量的标准。