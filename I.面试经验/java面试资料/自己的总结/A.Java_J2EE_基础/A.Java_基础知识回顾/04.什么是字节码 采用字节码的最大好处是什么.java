1:Java 中的编译器和解释器
2:采用字节码的好处








---------------------------------------------------------------------------------------------------------------------------------------------------------

1:Java 中的编译器和解释器

    Java 中引入了虚拟机的概念，即在机器和编译程序之间加入了1层抽象的虚拟的机器。这台虚拟的机器在任何平台上都提供给编译程序1个的共同的接口。
编译程序只需要面向虚拟机，生成虚拟机能够理解的代码，然后由解释器来将虚拟机代码转换为特定系统的机器码执行。在 Java 中，这种供虚拟机理解的代码叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。


    每1种平台的解释器是不同的，但是实现的虚拟机是相同的。Java 源程序经过编译器编译后变成字节码，字节码由虚拟机解释执行，虚拟机将每1条要执行的字节码送给解释器，解释器将其翻译成特定机器上的机器码，
然后在特定的机器上运行。这也就是解释了 Java 的编译与解释并存的特点。

Java 源代码---->编译器---->jvm 可执行的 Java 字节码(即虚拟指令)---->jvm---->jvm 中解释器----->机器可执行的二进制机器码---->程序运行。



--------------------------------------------------------------------

2:采用字节码的好处

    Java 语言通过字节码的方式，在1定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。
所以 Java 程序运行时比较高效，而且，由于字节码并不专对1种特定的机器，因此，Java 程序无须重新编译便可在多种不同的计算机上运行。


    解释性语言：解释型语言，是在运行的时候将程序翻译成机器语言。解释型语言的程序不需要在运行前编译，在运行程序的时候才翻译，专门的解释器负责在每个语句执行的时候解释程序代码。
这样解释型语言每执行1次就要翻译1次，效率比较低。——百度百科