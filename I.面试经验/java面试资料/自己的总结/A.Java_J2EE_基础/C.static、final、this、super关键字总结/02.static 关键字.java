static 关键字主要有以下四种使用场景：
1.修饰成员变量和成员方法:
2.静态代码块:
3.静态内部类（static 修饰类的话只能修饰内部类）:
4.静态导包(用来导入类中的静态资源，1.5 之后的新特性):





---------------------------------------------------------------------------------------------------------------------------
1.修饰成员变量和成员方法:
    被 static 修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享，可以并且建议通过类名调用。
被 static 声明的成员变量属于静态成员变量，静态变量 存放在 Java 内存区域的方法区。调用格式：类名.静态变量名 类名.静态方法名()

    方法区与 Java 堆1样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。
虽然 Java 虚拟机规范把方法区描述为堆的1个逻辑部分，但是它却有1个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。

    HotSpot 虚拟机中方法区也常被称为 “永久代”，本质上两者并不等价。仅仅是因为 HotSpot 虚拟机设计团队用永久代来实现方法区而已，
这样 HotSpot 虚拟机的垃圾收集器就可以像管理 Java 堆1样管理这部分内存了。但是这并不是1个好主意，因为这样更容易遇到内存溢出问题。

    
调用格式：

类名.静态变量名
类名.静态方法名()
如果变量或者方法被 private 则代表该属性或者该方法只能在类的内部被访问而不能在类的外部被方法。



---------------------------------------------------------------
2.静态代码块:
    静态代码块定义在类中方法外, 静态代码块在非静态代码块之前执行(静态代码块—>非静态代码块—>构造方法)。 
该类不管创建多少对象，静态代码块只执行1次。


静态代码块的格式是
static {    
语句体;   
}

    一个类中的静态代码块可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，
如果静态代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行1次。

静态代码块对于定义在它之后的静态变量，可以赋值，但是不能访问.




---------------------------------------------------------------
3.静态内部类（static 修饰类的话只能修饰内部类）: 
    静态内部类与非静态内部类之间存在1个最大的区别: 
非静态内部类在编译完成之后会隐含地保存着1个引用，该引用是指向创建它的外围类，但是静态内部类却没有。

    没有这个引用就意味着：
    1.它的创建是不需要依赖外围类的创建。
    2.它不能使用任何外围类的非 static 成员变量和方法。


Example（静态内部类实现单例模式）

public class Singleton {
    
    //声明为 private 避免调用默认构造方法创建对象
    private Singleton() {
    }
    
    //声明为 private 表明静态内部该类只能在该 Singleton 类中被访问
    private static class SingletonHolder {
        private static final Singleton INSTANCE = new Singleton();
    }

    public static Singleton getUniqueInstance() {
        return SingletonHolder.INSTANCE;
    }
}
    当 Singleton 类加载时，静态内部类 SingletonHolder 没有被加载进内存。
只有当调用 getUniqueInstance() 方法从而触发 SingletonHolder.INSTANCE 时 SingletonHolder 才会被加载，
此时初始化 INSTANCE 实例，并且 JVM 能确保 INSTANCE 只被实例化1次。

这种方式不仅具有延迟初始化的好处，而且由 JVM 提供了对线程安全的支持。



---------------------------------------------------------------
4.静态导包(用来导入类中的静态资源，1.5 之后的新特性):
   格式为：import static 这两个关键字连用可以指定导入某个类中的指定静态资源，并且不需要使用类名调用类中静态成员，
可以直接使用类中静态成员变量和成员方法。

  Math. --- 将 Math 中的所有静态资源导入，这时候可以直接使用里面的静态方法，而不用通过类名进行调用
如果只想导入单1某个静态方法，只需要将换成对应的方法名即可
 


import static java.lang.Math.;
// 换成import static java.lang.Math.max;具有一样的效果
public class Demo {
	public static void main(String[] args) {
 
		int max = max(1,2);
		System.out.println(max);
	}
}